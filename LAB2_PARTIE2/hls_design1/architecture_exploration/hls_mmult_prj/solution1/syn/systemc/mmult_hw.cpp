// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mmult_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mmult_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mmult_hw::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> mmult_hw::ap_ST_fsm_state1 = "1";
const sc_lv<14> mmult_hw::ap_ST_fsm_state2 = "10";
const sc_lv<14> mmult_hw::ap_ST_fsm_state3 = "100";
const sc_lv<14> mmult_hw::ap_ST_fsm_state4 = "1000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state5 = "10000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state6 = "100000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> mmult_hw::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> mmult_hw::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> mmult_hw::ap_const_lv32_1 = "1";
const sc_lv<32> mmult_hw::ap_const_lv32_2 = "10";
const sc_lv<1> mmult_hw::ap_const_lv1_0 = "0";
const sc_lv<32> mmult_hw::ap_const_lv32_3 = "11";
const sc_lv<32> mmult_hw::ap_const_lv32_4 = "100";
const sc_lv<32> mmult_hw::ap_const_lv32_8 = "1000";
const sc_lv<32> mmult_hw::ap_const_lv32_D = "1101";
const sc_lv<6> mmult_hw::ap_const_lv6_0 = "000000";
const sc_lv<1> mmult_hw::ap_const_lv1_1 = "1";
const sc_lv<12> mmult_hw::ap_const_lv12_0 = "000000000000";
const sc_lv<32> mmult_hw::ap_const_lv32_9 = "1001";
const sc_lv<32> mmult_hw::ap_const_lv32_5 = "101";
const sc_lv<12> mmult_hw::ap_const_lv12_32 = "110010";
const sc_lv<6> mmult_hw::ap_const_lv6_32 = "110010";
const sc_lv<6> mmult_hw::ap_const_lv6_1 = "1";
const bool mmult_hw::ap_const_boolean_1 = true;

mmult_hw::mmult_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mmult_hw_fadd_32nbkb_U1 = new mmult_hw_fadd_32nbkb<1,5,32,32,32>("mmult_hw_fadd_32nbkb_U1");
    mmult_hw_fadd_32nbkb_U1->clk(ap_clk);
    mmult_hw_fadd_32nbkb_U1->reset(ap_rst);
    mmult_hw_fadd_32nbkb_U1->din0(sum_reg_114);
    mmult_hw_fadd_32nbkb_U1->din1(tmp_5_reg_310);
    mmult_hw_fadd_32nbkb_U1->ce(ap_var_for_const0);
    mmult_hw_fadd_32nbkb_U1->dout(grp_fu_149_p2);
    mmult_hw_fmul_32ncud_U2 = new mmult_hw_fmul_32ncud<1,4,32,32,32>("mmult_hw_fmul_32ncud_U2");
    mmult_hw_fmul_32ncud_U2->clk(ap_clk);
    mmult_hw_fmul_32ncud_U2->reset(ap_rst);
    mmult_hw_fmul_32ncud_U2->din0(a_load_reg_300);
    mmult_hw_fmul_32ncud_U2->din1(b_load_reg_305);
    mmult_hw_fmul_32ncud_U2->ce(ap_var_for_const0);
    mmult_hw_fmul_32ncud_U2->dout(grp_fu_154_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_8_cast_fu_225_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_164_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_164_p2 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_10_cast_fu_241_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond1_fu_176_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ib_reg_103 );

    SC_METHOD(thread_exitcond2_fu_164_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ia_reg_80 );

    SC_METHOD(thread_exitcond_fu_203_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( id_reg_127 );

    SC_METHOD(thread_ia_1_fu_170_p2);
    sensitive << ( ia_reg_80 );

    SC_METHOD(thread_ib_1_fu_182_p2);
    sensitive << ( ib_reg_103 );

    SC_METHOD(thread_id_1_fu_209_p2);
    sensitive << ( id_reg_127 );

    SC_METHOD(thread_next_mul2_fu_158_p2);
    sensitive << ( phi_mul1_reg_91 );

    SC_METHOD(thread_next_mul_fu_230_p2);
    sensitive << ( phi_mul_reg_138 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( out_addr_reg_272 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_reg_114 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_203_p2 );

    SC_METHOD(thread_tmp_10_cast_fu_241_p1);
    sensitive << ( tmp_s_fu_236_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_188_p1);
    sensitive << ( ib_reg_103 );

    SC_METHOD(thread_tmp_4_cast_fu_215_p1);
    sensitive << ( id_reg_127 );

    SC_METHOD(thread_tmp_7_cast_fu_198_p1);
    sensitive << ( tmp_7_fu_192_p2 );

    SC_METHOD(thread_tmp_7_fu_192_p2);
    sensitive << ( tmp_2_cast_fu_188_p1 );
    sensitive << ( phi_mul1_reg_91 );

    SC_METHOD(thread_tmp_8_cast_fu_225_p1);
    sensitive << ( tmp_8_fu_219_p2 );

    SC_METHOD(thread_tmp_8_fu_219_p2);
    sensitive << ( phi_mul1_reg_91 );
    sensitive << ( tmp_4_cast_fu_215_p1 );

    SC_METHOD(thread_tmp_s_fu_236_p2);
    sensitive << ( tmp_2_cast_reg_267 );
    sensitive << ( phi_mul_reg_138 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_176_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_203_p2 );
    sensitive << ( exitcond2_fu_164_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mmult_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, next_mul2_fu_158_p2, "next_mul2_fu_158_p2");
    sc_trace(mVcdFile, next_mul2_reg_246, "next_mul2_reg_246");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ia_1_fu_170_p2, "ia_1_fu_170_p2");
    sc_trace(mVcdFile, ia_1_reg_254, "ia_1_reg_254");
    sc_trace(mVcdFile, ib_1_fu_182_p2, "ib_1_fu_182_p2");
    sc_trace(mVcdFile, ib_1_reg_262, "ib_1_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_cast_fu_188_p1, "tmp_2_cast_fu_188_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_267, "tmp_2_cast_reg_267");
    sc_trace(mVcdFile, exitcond1_fu_176_p2, "exitcond1_fu_176_p2");
    sc_trace(mVcdFile, out_addr_reg_272, "out_addr_reg_272");
    sc_trace(mVcdFile, id_1_fu_209_p2, "id_1_fu_209_p2");
    sc_trace(mVcdFile, id_1_reg_280, "id_1_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_203_p2, "exitcond_fu_203_p2");
    sc_trace(mVcdFile, next_mul_fu_230_p2, "next_mul_fu_230_p2");
    sc_trace(mVcdFile, next_mul_reg_290, "next_mul_reg_290");
    sc_trace(mVcdFile, a_load_reg_300, "a_load_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, b_load_reg_305, "b_load_reg_305");
    sc_trace(mVcdFile, grp_fu_154_p2, "grp_fu_154_p2");
    sc_trace(mVcdFile, tmp_5_reg_310, "tmp_5_reg_310");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_149_p2, "grp_fu_149_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ia_reg_80, "ia_reg_80");
    sc_trace(mVcdFile, phi_mul1_reg_91, "phi_mul1_reg_91");
    sc_trace(mVcdFile, ib_reg_103, "ib_reg_103");
    sc_trace(mVcdFile, exitcond2_fu_164_p2, "exitcond2_fu_164_p2");
    sc_trace(mVcdFile, sum_reg_114, "sum_reg_114");
    sc_trace(mVcdFile, id_reg_127, "id_reg_127");
    sc_trace(mVcdFile, phi_mul_reg_138, "phi_mul_reg_138");
    sc_trace(mVcdFile, tmp_7_cast_fu_198_p1, "tmp_7_cast_fu_198_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_225_p1, "tmp_8_cast_fu_225_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_241_p1, "tmp_10_cast_fu_241_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_7_fu_192_p2, "tmp_7_fu_192_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_215_p1, "tmp_4_cast_fu_215_p1");
    sc_trace(mVcdFile, tmp_8_fu_219_p2, "tmp_8_fu_219_p2");
    sc_trace(mVcdFile, tmp_s_fu_236_p2, "tmp_s_fu_236_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mmult_hw.hdltvin.dat");
    mHdltvoutHandle.open("mmult_hw.hdltvout.dat");
}

mmult_hw::~mmult_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mmult_hw_fadd_32nbkb_U1;
    delete mmult_hw_fmul_32ncud_U2;
}

void mmult_hw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mmult_hw::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_1))) {
        ia_reg_80 = ia_1_reg_254.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ia_reg_80 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
        ib_reg_103 = ib_1_reg_262.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_164_p2.read()))) {
        ib_reg_103 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        id_reg_127 = id_1_reg_280.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_0))) {
        id_reg_127 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_1))) {
        phi_mul1_reg_91 = next_mul2_reg_246.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_91 = ap_const_lv12_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        phi_mul_reg_138 = next_mul_reg_290.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_138 = ap_const_lv12_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sum_reg_114 = grp_fu_149_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_0))) {
        sum_reg_114 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        a_load_reg_300 = a_q0.read();
        b_load_reg_305 = b_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ia_1_reg_254 = ia_1_fu_170_p2.read();
        next_mul2_reg_246 = next_mul2_fu_158_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ib_1_reg_262 = ib_1_fu_182_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        id_1_reg_280 = id_1_fu_209_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_203_p2.read()))) {
        next_mul_reg_290 = next_mul_fu_230_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_0))) {
        out_addr_reg_272 =  (sc_lv<12>) (tmp_7_cast_fu_198_p1.read());
        tmp_2_cast_reg_267 = tmp_2_cast_fu_188_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_5_reg_310 = grp_fu_154_p2.read();
    }
}

void mmult_hw::thread_a_address0() {
    a_address0 =  (sc_lv<12>) (tmp_8_cast_fu_225_p1.read());
}

void mmult_hw::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void mmult_hw::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mmult_hw::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void mmult_hw::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void mmult_hw::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mmult_hw::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mmult_hw::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mmult_hw::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mmult_hw::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mmult_hw::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void mmult_hw::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_164_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mmult_hw::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mmult_hw::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_164_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mmult_hw::thread_b_address0() {
    b_address0 =  (sc_lv<12>) (tmp_10_cast_fu_241_p1.read());
}

void mmult_hw::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void mmult_hw::thread_exitcond1_fu_176_p2() {
    exitcond1_fu_176_p2 = (!ib_reg_103.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(ib_reg_103.read() == ap_const_lv6_32);
}

void mmult_hw::thread_exitcond2_fu_164_p2() {
    exitcond2_fu_164_p2 = (!ia_reg_80.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(ia_reg_80.read() == ap_const_lv6_32);
}

void mmult_hw::thread_exitcond_fu_203_p2() {
    exitcond_fu_203_p2 = (!id_reg_127.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(id_reg_127.read() == ap_const_lv6_32);
}

void mmult_hw::thread_ia_1_fu_170_p2() {
    ia_1_fu_170_p2 = (!ia_reg_80.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ia_reg_80.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_hw::thread_ib_1_fu_182_p2() {
    ib_1_fu_182_p2 = (!ib_reg_103.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ib_reg_103.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_hw::thread_id_1_fu_209_p2() {
    id_1_fu_209_p2 = (!id_reg_127.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(id_reg_127.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void mmult_hw::thread_next_mul2_fu_158_p2() {
    next_mul2_fu_158_p2 = (!phi_mul1_reg_91.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul1_reg_91.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void mmult_hw::thread_next_mul_fu_230_p2() {
    next_mul_fu_230_p2 = (!phi_mul_reg_138.read().is_01() || !ap_const_lv12_32.is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul_reg_138.read()) + sc_biguint<12>(ap_const_lv12_32));
}

void mmult_hw::thread_out_r_address0() {
    out_r_address0 = out_addr_reg_272.read();
}

void mmult_hw::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void mmult_hw::thread_out_r_d0() {
    out_r_d0 = sum_reg_114.read();
}

void mmult_hw::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void mmult_hw::thread_tmp_10_cast_fu_241_p1() {
    tmp_10_cast_fu_241_p1 = esl_zext<64,12>(tmp_s_fu_236_p2.read());
}

void mmult_hw::thread_tmp_2_cast_fu_188_p1() {
    tmp_2_cast_fu_188_p1 = esl_zext<12,6>(ib_reg_103.read());
}

void mmult_hw::thread_tmp_4_cast_fu_215_p1() {
    tmp_4_cast_fu_215_p1 = esl_zext<12,6>(id_reg_127.read());
}

void mmult_hw::thread_tmp_7_cast_fu_198_p1() {
    tmp_7_cast_fu_198_p1 = esl_zext<64,12>(tmp_7_fu_192_p2.read());
}

void mmult_hw::thread_tmp_7_fu_192_p2() {
    tmp_7_fu_192_p2 = (!phi_mul1_reg_91.read().is_01() || !tmp_2_cast_fu_188_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul1_reg_91.read()) + sc_biguint<12>(tmp_2_cast_fu_188_p1.read()));
}

void mmult_hw::thread_tmp_8_cast_fu_225_p1() {
    tmp_8_cast_fu_225_p1 = esl_zext<64,12>(tmp_8_fu_219_p2.read());
}

void mmult_hw::thread_tmp_8_fu_219_p2() {
    tmp_8_fu_219_p2 = (!phi_mul1_reg_91.read().is_01() || !tmp_4_cast_fu_215_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul1_reg_91.read()) + sc_biguint<12>(tmp_4_cast_fu_215_p1.read()));
}

void mmult_hw::thread_tmp_s_fu_236_p2() {
    tmp_s_fu_236_p2 = (!phi_mul_reg_138.read().is_01() || !tmp_2_cast_reg_267.read().is_01())? sc_lv<12>(): (sc_biguint<12>(phi_mul_reg_138.read()) + sc_biguint<12>(tmp_2_cast_reg_267.read()));
}

void mmult_hw::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_164_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_176_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_203_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXX";
            break;
    }
}

void mmult_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

