// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_hw,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.614000,HLS_SYN_LAT=1380101,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=380,HLS_SYN_LUT=406,HLS_VERSION=2018_3}" *)

module mmult_hw (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [11:0] b_address0;
output   b_ce0;
input  [15:0] b_q0;
output  [11:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [15:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] next_mul2_fu_158_p2;
reg   [11:0] next_mul2_reg_246;
wire    ap_CS_fsm_state2;
wire   [5:0] ia_1_fu_170_p2;
reg   [5:0] ia_1_reg_254;
wire   [5:0] ib_1_fu_182_p2;
reg   [5:0] ib_1_reg_262;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp_2_cast_fu_188_p1;
reg   [11:0] tmp_2_cast_reg_267;
wire   [0:0] exitcond1_fu_176_p2;
reg   [11:0] out_addr_reg_272;
wire   [5:0] id_1_fu_209_p2;
reg   [5:0] id_1_reg_280;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_203_p2;
wire   [11:0] next_mul_fu_230_p2;
reg   [11:0] next_mul_reg_290;
reg   [15:0] a_load_reg_300;
wire    ap_CS_fsm_state5;
reg   [15:0] b_load_reg_305;
wire   [15:0] grp_fu_154_p2;
reg   [15:0] tmp_5_reg_310;
wire    ap_CS_fsm_state9;
wire   [15:0] grp_fu_149_p2;
wire    ap_CS_fsm_state14;
reg   [5:0] ia_reg_80;
reg   [11:0] phi_mul1_reg_91;
reg   [5:0] ib_reg_103;
wire   [0:0] exitcond2_fu_164_p2;
reg   [15:0] sum_reg_114;
reg   [5:0] id_reg_127;
reg   [11:0] phi_mul_reg_138;
wire   [63:0] tmp_7_cast_fu_198_p1;
wire   [63:0] tmp_8_cast_fu_225_p1;
wire   [63:0] tmp_10_cast_fu_241_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire   [11:0] tmp_7_fu_192_p2;
wire   [11:0] tmp_4_cast_fu_215_p1;
wire   [11:0] tmp_8_fu_219_p2;
wire   [11:0] tmp_s_fu_236_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

mmult_hw_hadd_16nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mmult_hw_hadd_16nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_114),
    .din1(tmp_5_reg_310),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

mmult_hw_hmul_16ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mmult_hw_hmul_16ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_300),
    .din1(b_load_reg_305),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ia_reg_80 <= ia_1_reg_254;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ia_reg_80 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ib_reg_103 <= ib_1_reg_262;
    end else if (((exitcond2_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ib_reg_103 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        id_reg_127 <= id_1_reg_280;
    end else if (((exitcond1_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        id_reg_127 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul1_reg_91 <= next_mul2_reg_246;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_91 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        phi_mul_reg_138 <= next_mul_reg_290;
    end else if (((exitcond1_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_138 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_reg_114 <= grp_fu_149_p2;
    end else if (((exitcond1_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_reg_114 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_load_reg_300 <= a_q0;
        b_load_reg_305 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ia_1_reg_254 <= ia_1_fu_170_p2;
        next_mul2_reg_246 <= next_mul2_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ib_1_reg_262 <= ib_1_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        id_1_reg_280 <= id_1_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_203_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        next_mul_reg_290 <= next_mul_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_addr_reg_272 <= tmp_7_cast_fu_198_p1;
        tmp_2_cast_reg_267[5 : 0] <= tmp_2_cast_fu_188_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_5_reg_310 <= grp_fu_154_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_164_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_164_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_176_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_203_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_8_cast_fu_225_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_address0 = tmp_10_cast_fu_241_p1;

assign exitcond1_fu_176_p2 = ((ib_reg_103 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond2_fu_164_p2 = ((ia_reg_80 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond_fu_203_p2 = ((id_reg_127 == 6'd50) ? 1'b1 : 1'b0);

assign ia_1_fu_170_p2 = (ia_reg_80 + 6'd1);

assign ib_1_fu_182_p2 = (ib_reg_103 + 6'd1);

assign id_1_fu_209_p2 = (id_reg_127 + 6'd1);

assign next_mul2_fu_158_p2 = (phi_mul1_reg_91 + 12'd50);

assign next_mul_fu_230_p2 = (phi_mul_reg_138 + 12'd50);

assign out_r_address0 = out_addr_reg_272;

assign out_r_d0 = sum_reg_114;

assign tmp_10_cast_fu_241_p1 = tmp_s_fu_236_p2;

assign tmp_2_cast_fu_188_p1 = ib_reg_103;

assign tmp_4_cast_fu_215_p1 = id_reg_127;

assign tmp_7_cast_fu_198_p1 = tmp_7_fu_192_p2;

assign tmp_7_fu_192_p2 = (phi_mul1_reg_91 + tmp_2_cast_fu_188_p1);

assign tmp_8_cast_fu_225_p1 = tmp_8_fu_219_p2;

assign tmp_8_fu_219_p2 = (phi_mul1_reg_91 + tmp_4_cast_fu_215_p1);

assign tmp_s_fu_236_p2 = (phi_mul_reg_138 + tmp_2_cast_reg_267);

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_267[11:6] <= 6'b000000;
end

endmodule //mmult_hw
